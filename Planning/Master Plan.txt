The Engine:
- Game game
    - Area (vector) country
        - Location (2D Array of pointers to locations) pLocationMap
            - Object (vector of pointers to objects) objectsHere
            - NPC ("is a" Character) (vector of pointers to NPCs) charactersHere
    - PC (is a character)
        - NPC (vector of pointers to characters including the PC) party
        - inventory (vector of pointers to objects)
    - Object (vector of pointers to Objects) masterObjectList
    - Command

    - Events
    - Effect Parser
==================================================================================================

Object:
X Improve the master object list.
0001
X Error handle lookupObjectByName. If an object isn't found in the list, an assert should be
triggered:
 else
{
assert(false);
},
Or an exception should be thrown.
X Change this so it returns an error code instead and is handled at the next level (ie, throws an
error there. It should throw an exception rather than the assert (for learning).
The error code was entirely unnecessary after implementing the exception. The error code was removed.
- Write a function in Game which takes a location and vector of object strings and a location, looks up the 
objects, and places them in the location.
- Write a function which takes a character and a vector of object strings, looks up the objects, and places
them in the character's inventory.
- Maybe there's a storage container object. Maybe some you can get (box, bag of holding, etc.),
and some you can't (barrel, chest, infinite void, etc.) They should be implemented so you
can get an object from them by name, e.g., "get necklace from box", or so that you can browse
the contents of the box, e.g., "search box"
- Include functionality to replace the initial description string with a second string once the object is
obtained:
e.g., "This sword is lodged in the rocky crag of the cliffside - it looks like it could be wrested
free with a little effort... if only you could climb up to it."
Then once obtained and forever after,
"This plain steel sword is a sharp and formidable weapon."

Game:
- Investigate //DEFINE LOCATIONS section of the Game() default constructor. Think about
possible alternatives.
- Move starting equipment to the PC's default constructor.
- Change "move" to "command" (std::string move, getMove, parseMove, executeMove, etc.)
- Verify the getCommand, parseCommand, and executeCommand workflow
- UI (where is this implemented? Game? Where should it be implemented? Its own class, maybe?)
    - Add a period to "You cant see a <object> here" error message.
    - Options for printing inventory? How to print equipped items - Little ASCII
diagram of a guy with labels:
  _    Head      :
 ( )   Neck      :
 _|_   Left Arm  :
|---|  Right Arm :
 ---   Chest     :
_| |_  Feet      :
       Left Ring :
       Right Ring:
- Make the printed message a little more sophisticated ie, print the location's description only the first
time it is visited,
- Write PLACE and DEFINE functions to take a vector of strings and do the proper lookups to add them to the 
appropriate lists. Include exception handling here too.

Commands:
- Implement "examine" or "x" command to return the description of an object either in your 
inventory or in the current location; the description of the current location (also, "look");
or the description of a character (including "x self")
- Implement "look", "examine," or "x" to return the description of the current location.
- Implement "north", "south", "east", and "west" full name commands as alternatives to the
"n", "s", "e", "w" commands.
- Permissions, error handling, documentation.

Character:
- printInventory: Troubleshoot picking up multiple of the same item "catcat"
- Equiping items
- Attributes, skills, powers, abilities, experience points, etc.
- Combat
- Team
    - Play as one main character, but with a party (like Baldur's Gate I/II)
    - Adding/removing NPC team members

Area/Location:
- Building/Room (subsets and subsubsets of locations)
- Verify the Area/Location workflow - where and how are the different areas stored?
The different locations? Somehow each area should contain its locations, each location
should contain its buildings, and each building should contain its rooms. We also want
a scaleable architecture so we can implement maybe countries having multiple areas,
continents with multiple countries, worlds with multiple continents, galaxies with multiple
worlds, universes with multiple galaxies, etc. We should also be able to scale the other
direction in case we need subrooms - maybe if you're shrunk, then you'd maybe want a whole 
big space that is the "table," say, as one use case. Of course the use case for the galaxies/
universes capability would be a sci-fi world where interdimensional travel is a reality.
- Traveling between Areas (and beyond) - it'd probably be a specific location you'd have to
visit, just like within a building, you could only travel between rooms with doors between
them.
- Create a second Area with four locations and a point of travel between them. Test travel
between areas.
- Map
    - Add locations you have visited to your area map
    - Buildings you have visited to your location map?
    - Rooms you have visited to your building map (ie, Legend of Zelda dungeons?)
- Fast Travel - probably from the map

Events?
- Combat
    - Trigger
    - Description
    - Effect:
e.g., you get burned, you lose a level, you activate a trap, you are seen by the monster, etc.
        - Maybe the effect from the event is added to an "effects to be processed on this
character this cycle" attribute list on each character, then each cycle the effect parser is
called to cycle through each "character here" and apply each effect.

Effect parser:
Should be usable by:
    - events
    - spells
    - items
        - one shot,
        - equippable items with a permanent effect on the user
        - equippable weapons with effects on a target
            - Weapons with special hit effects (e.g., posion arrows, flaming sword, etc.)
            - Items with a special use/property (e.g., ring of webs, etc.)